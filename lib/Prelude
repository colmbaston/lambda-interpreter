~~ -----------------
~~ Basic Combinators
~~ -----------------

~let S := λx.λy.λz.x z (y z)
~let K := λx.λy.x
~let I := λx.x
~let B := λx.λy.λz.x (y z)
~let C := λx.λy.λz.x z y
~let W := λx.λy.x y y
~let X := λx.x S K

~~ --------
~~ Booleans
~~ --------

~let True  := λt.λf.t
~let False := λt.λf.f

~let Not := λb.b False True
~let And := λa.λb.a b False
~let Or  := λa.λb.a True b
~let Xor := λa.λb.a (Not b) b

~let || := Or
~let && := And

~~ -------------------------
~~ Church Numeral Operations
~~ -------------------------

~let IsZero := λn.n (λx.False) True
~let Succ   := λn.λf.λx.f (n f x)
~let Pred   := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)
~let Plus   := λm.λn.λf.λx.m f (n f x)
~let Minus  := λm.λn.n Pred m
~let Mult   := λm.λn.λf.m (n f)
~let Exp    := λm.λn.(IsZero n) 1 (n m)

~let + := Plus
~let - := Minus
~let * := Mult
~let ^ := Exp

~let LEQ := λm.λn.IsZero (- m n)
~let GEQ := λm.λn.IsZero (- n m)
~let LT  := λm.λn.Not (GEQ m n)
~let GT  := λm.λn.Not (LEQ m n)
~let EQ  := λm.λn.&&  (GEQ m n) (LEQ m n)
~let NEQ := λm.λn.Not (EQ  m n)

~let <= := LEQ
~let >= := GEQ
~let <  := LT
~let >  := GT
~let == := EQ
~let /= := NEQ

~let Min := λn.λm. <= n m n m
~let Max := λn.λm. >= n m n m

~~ -----
~~ Pairs
~~ -----

~let Pair := λa.λb.λp.p a b
~let <,>  := Pair

~let First  := λp.p True
~let Second := λp.p False
~let Swap   := λp.<,> (Second p) (First p)

~~ -----
~~ Lists
~~ -----

~let Nil  := λx.True
~let Cons := <,>
~let Head := First
~let Tail := Second

~let [] := Nil
~let :: := Cons

~let Null  := λl.l (λh.λt.False)
~let Drop  := λn.n Tail
~let Index := λl.λn.Head (Drop n l)

~~ -----------------------
~~ Fixed-point Combinators
~~ -----------------------

~let Y     := λf.(λx.f (x x)) (λx.f (x x))
~let Z     := λf.(λx.f (λy.x x y)) (λx.f (λy.x x y))
~let Theta := (λx.λy.y (x x y)) (λx.λy.y (x x y))

~~ -------------------------------------------------------------------------
~~ Recursion (Warning: These will diverge under applicative order reduction)
~~ -------------------------------------------------------------------------

~let RFrom := λr.λn.:: n (r (Succ n))
~let From  := Y RFrom

~let RFact := λr.λn.(IsZero n) 1 (* n (r (Pred n)))
~let Fact  := Y RFact

~let RDivMod := λr.λq.λm.λn.(< m n) (<,> q m) (r (Succ q) (- m n) n)
~let DivMod  := Y RDivMod 0

~let Div := λm.λn.First (DivMod m n)
~let Mod := λm.λn.Second (DivMod m n)

~let / := Div
~let % := Mod

~let RTake := λr.λn.λl.(IsZero n) [] (:: (Head l) (r (Pred n) (Tail l)))
~let Take  := Y RTake

~let Foldr := λf.λx.Y (λr.λl.Null l x (f (Head l) (Tail l) (r (Tail l))))
~let Foldl := λf.Y (λr.λa.λl.(Null l) a (r (f (Head l) (Tail l) a) (Tail l)))

~let Sum     := Foldr (λh.λt.λr.+ h r) 0
~let Length  := Foldr (λh.λt.λr.Succ r) 0
~let Append  := λa.λb.Foldr (λh.λt.λr.:: h r) b a
~let Concat  := Foldr (λh.λt.λr.Append h r) []
~let Map     := λf.Foldr (λh.λt.λr.Cons (f h) r) []
~let Filter  := λp.Foldr (λh.λt.λr.(p h) (:: h r) r) []
~let Reverse := Foldl (λh.λt.λa.:: h a) []

~~ ----------------
~~ Mutual Recursion
~~ ----------------

~let Theta_2 := (λx.λf.λg.f (x x g f)) (λx.λf.λg.f (x x g f))

~let REven := λr.λn.(IsZero n) True  (r (Pred n))
~let ROdd  := λr.λn.(IsZero n) False (r (Pred n))

~let Even := Theta_2 REven ROdd
~let Odd  := Theta_2 ROdd REven

~let RFilterPrime := λr.λxs.:: (Head xs) (r (Filter (λn.Not (IsZero (% n (Head xs)))) (Tail xs)))
~let  FilterPrime := Y RFilterPrime
~let Primes := FilterPrime (From 2)
